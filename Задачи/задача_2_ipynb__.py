# -*- coding: utf-8 -*-
"""задача 2.ipynb""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iF92V77HbVJ16K_EpFn9BQ-YwMC7dx08

f-строки
"""

name = "Пушкин"
value = 9.67
print(f"Индекс озеленения территории {name} равен {value}%")  # такой формат строк, позволяет добавлять в него динамические значения

"""##### **Задача 1** """

class GreenZoneIndex:

    
    def __init__(self, territory_name, territory_area, green_zones):
        """
        :param territory_name: Название территории
        :param territory_area: Площадь территории
        :param green_zones: Список площадей парков
        """
        # TODO все аргументы конструктора записать в атрибуты экземпляра класса
        self.territory_name = territory_name
        self.territory_area = territory_area
        self.green_zones = green_zones

        self.green_index = self.calculate_green_index()  # индекс озеленения

        # TODO посчитать индекс озеленения с помощью метода calculate_green_index

        

    def calculate_green_index(self):
        """
        Метод для вычисления индекса озеленения.

        Индекс рассчитывается как отношение площади всех парков к площади территории
        """

        # TODO посчитать индекс озеленения с атрибутов экземпляра класса

        green_index = (sum(self.green_zones) / self.territory_area) * 100

        return round(green_index, 2)
    

    def __str__(self):
        s = f"Я ЭКЗЕМПЛЯР КЛАССА GreenZoneIndex. МОЁ ИМЯ - {self.territory_name}, МОЯ ПЛОЩАДЬ - {self.territory_area}, МОИ ЗОНЫ - СПИСОК {self.green_zones}, МОЙ green_index - {self.green_index}"

        return s


    def __repr__(self):
      return self.__str__()

territory_name = "Пушкин"
territory_area = 28676
green_zones = [302, 487, 420, 325, 471, 363, 404]

# Создать экземпряр класса и с помощью его атрибутов распечатать индекс озеленения в процентах до 2 знака после запятой. 
pushkin = GreenZoneIndex(territory_name, territory_area, green_zones)
print(f"Индекс озеленения территории {pushkin.territory_name} равен {pushkin.green_index}%")

class MyClass():
    a = 10 

    def __init__(self, my_atribut):
        self.my_atribut = my_atribut

my = MyClass(5)
my_2 = MyClass(6)

print(my.a, my.my_atribut)
print(my_2.a, my_2.my_atribut)

type(my)

my.__dict__

"""##### ***Задача 2***

Дан список словарей территорий.  
Сделать новый список с объектами ранее реализованного типа `GreenZoneIndex`.
"""

list_territories = [
    {
        "territory_name": "Пушкин",
        "territory_area": 28676,
        "green_zones": [302, 487, 420, 325, 471, 363, 404]
    },
    {
        "territory_name": "Павловск",
        "territory_area": 21025,
        "green_zones": [360, 375, 223, 258, 345, 296, 303]
    },
    {
        "territory_name": "Петергоф",
        "territory_area": 44274,
        "green_zones": [364, 447, 438, 223, 336, 431, 442]
    },
]

list_green_zone_index = []

# Мы проходимся по списку list_territories. Каждый раз забираем из этого списка
# по одному элементу. Этот элемент (в нашем случае - один из трёх словарей (dict))
for territory_dict in list_territories:
    # создаём переменную с именем territory_name и записываем в неё значение,
    # которое лежит в словаре territory_dict по ключу "territory_name"
    territory_name = territory_dict["territory_name"]
    # создаём переменную с именем territory_area и записываем в неё значение,
    # которое лежит в словаре territory_dict по ключу "territory_area"
    territory_area = territory_dict["territory_area"]
    # создаём переменную с именем green_zones и записываем в неё значение,
    # которое лежит в словаре territory_dict по ключу "green_zones"
    green_zones = territory_dict["green_zones"]


    # Создаём экземпляр класса GreenZoneIndex.
    # GreenZoneIndex(...) - вызов конструктора этого класса с аргументами:
    # territory_name, territory_area, green_zones. При вызове конструктора:
    # 1. Создастся объект класса GreenZoneIndex
    # 2. Будет вызван его метод __init__. В этот метод по переменной с именем
    # "self" прийдёт объект, который создался в пункте 1. Кроме того, метод
    # __init__ получит на вход аргументы territory_name, territory_area, green_zones,
    # после чего выполнится весь код, который записан в методе __init__. В результате
    # объект из пункта 1 окажется инициализирован в пункте 2.
    # Итак, получили инициализированный экземпляр класса GreenZoneIndex.
    # Этот экземпляр - то, что возвращает вызов конструктора GreenZoneIndex(territory_name, territory_area, green_zones)
    # Далее создаём переменную exemplar_Green_Zone_Index и в неё помещаем этот экземпляр
    exemplar_Green_Zone_Index = GreenZoneIndex(territory_name, territory_area, green_zones)
    # Полученный экземпляр добавляем в список list_green_zone_index
    list_green_zone_index.append(exemplar_Green_Zone_Index)

    # Тело цикла, и в частности этот принт выполнится для каждого элемента исходного списка. Очевидно, для каждого элемента
    # списка также выполнится всё, что находится в этот цикле - в нашем случае обращения к словарю, создание экземпляра класса и
    # добавление этого экземпляра в список list_green_zone_index
    print(green_zones, territory_area, territory_name)

# Создаём пустой список, в который будем добавлять экземпляры класса GreenZoneIndex
print(list_green_zone_index)

list_green_zone_index[0]

list_green_zone_index[1]

list_green_zone_index[2]

"""##### ***Задача 3***

Написать функцию `get_mean_green_index`,  
которая в качестве аргумента принимает список объектов типа `GreenZoneIndex` и считает от них средний индекс озеленения.

Как я поняла, надо найти средний индекс озеленения. Это сумма всех индексов / количество. Атрибут индекс озеленения green_index от класса GreenZoneIndex будет уже посчитан. От экземпляра считать атрибут
"""

instance = SomeClass() 
instance.attr # для уже созданного экземпляра

list_of_street_lengths = [
    527, 476, 880, 219, 773, 116, 551, 302, 992, 636, 
    462, 548, 897, 214, 519, 420, 577, 916, 805, 395
]

total_length = 0  # заводим переменную для суммы
for length in list_of_street_lengths:
    total_length += length  # total_length = total_length + length

print("Общая протяженность =", total_length)

list_of_street_lengths = [
    527, 476, 880, 219, 773, 116, 551, 302, 992, 636, 
    462, 548, 897, 214, 519, 420, 577, 916, 805, 395
]

print("Общая протяженность =", sum(list_of_street_lengths))

"""Индекс озеленения Пушкина"""

green_zones_pushkin = [302, 487, 420, 325, 471, 363, 404]
print("Общая площадь зеленых зон Пушкина = ", sum(green_zones_pushkin))

green_zones_pushkin = 2772
territory_area_pushkin = 28676
GreenZoneIndex_pushkin = green_zones_pushkin / territory_area_pushkin * 100
print(GreenZoneIndex_pushkin)

round(9.666620170177152, 2)

"""Индекс озеленения Павловска"""

green_zones_pavlovsk = [360, 375, 223, 258, 345, 296, 303]
print("Общая площадь зеленых зон Пушкина = ", sum(green_zones_pavlovsk))

green_zones_pavlovsk = 2160
territory_area_pavlovsk = 21025
GreenZoneIndex_pavlovsk = green_zones_pavlovsk / territory_area_pavlovsk * 100
print(GreenZoneIndex_pavlovsk)

round(10.273483947681331, 2)

"""Индекс озеленения Петергофа"""

green_zones_petergof = [364, 447, 438, 223, 336, 431, 442]
print("Общая площадь зеленых зон Пушкина = ", sum(green_zones_petergof))

green_zones_petergof = 2681
territory_area_petergof = 44274
GreenZoneIndex_petergof = green_zones_petergof / territory_area_petergof * 100
print(GreenZoneIndex_petergof)

round(6.055472737950039, 2)

"""Средний индекс озеленения по Пушкину, Павловску и Петергофу:"""

mean_green_index = ((GreenZoneIndex_pushkin + GreenZoneIndex_pavlovsk + GreenZoneIndex_petergof) / 3)
print(mean_green_index)

round(8.665192285269507, 2)

"""##### ***Задача 4***

Написать функцию `filter_min_green_index`,  
которая в качестве аргументов принимает список объектов типа `GreenZoneIndex`  
и минимальный порог озеленения, значение по умолчанию 0.1. 

Результатом функции должно быть число территорий,  
индекс озеленения которых ниже заданного минимального порога.

Что такое значение по умолчанию?
"""

students_dict = {
    'Саша': 27,
    'Кирилл': 52, 
    'Маша': 14, 
    'Петя': 36, 
    'Оля': 43, 
}
min_age = 18  # минимальный возраст

students_list = []
for student in students_dict:
    if students_dict[student] > min_age:
        students_list.append(student)

print("Исходный список:", students_list)

students_list.sort()
print("Отсортированный список:", students_list)

"""## list comprehension

### Обработка каждого элемента
"""

cart = [3, 4, 12, 17, 19, 21, 23, 26, 30]

cashier = []  # новый список с помощью метода append
for item in cart:
    cashier.append(item)
print(cashier)

cashier = [item for item in cart]
print(cashier)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-1.png)

##### ***Задача. Сделать название городов с заглавной буквы.***
"""

list_cities = ["москва", "иЖЕВСк", "Владивосток", "новосибирсК", "мУРМАНСК"]

list_cities = ...  # TODO метод строки capitalize делает первую букву заглавной, а все остальные строчными
print(list_cities)

"""### Фильтрация элементов"""

cart = [5, 7, 9, 10, 12, 15, 19, 20, 22]

cashier_3 = []
for item in cart:
    if item % 2 == 0:  # только четные
        cashier_3.append(item)
print(cashier_3)

cashier_3 = [item for item in cart if item % 2 == 0]
print(cashier_3)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-2.png)

##### ***Задача. Отфильтровать города с населением больше 1 млн. человек.***
"""

list_cities = [
    {
        "name": "Москва",
        "population": 12 * 10 ** 6,
    },
    {
        "name": "Санкт-Петербург",
        "population": 5 * 10 ** 6,
    },
    {
        "name": "Ижевск",
        "population": 0.6 * 10 ** 6,
    },
]

filter_population = 10 ** 6
# TODO отфильтровать города